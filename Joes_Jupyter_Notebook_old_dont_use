Python assigment

Joe Webb 3/30/2017

This assigment contains all of Joes code and results from the Python assigment for BCB546X. 


## Your Mission: Complete Python code in a Jupyter Notebook ##
## 1. Document Dr. X's function with comments and with markdown text in your Jupyter notebook
######################## Python Translate Script ########################

## Here's the start of our Python script. Thanks for completing it for me! - Dr. X
## IMPORTANT: install biopython so that this will work

#from Bio import SeqIO
#from Bio.Data import CodonTable
#import pandas as pd



## 2. Write a function that translates a string of nucleotides to amino acids based on Dr. X's pseudo-code suggestion

First I will create a function that uses a fasta file.

This function will create a dictionary that will be filled with sequence data from the fasta file. 

Then I will loop through the file and utilize a new function to take data from the fasta file and return unique records. Each record will be split and given a species name, thus generating a list of the names. 

Finally, this will fill the dictionary with each new record and then return the data from the dictionary. 



## 1 Sample Script ##
## Dr. X: this gets sequences 
## please finish documenting this function with comments, or in notebook markdown text
## be sure to provide details on return types and arguments
def get_sequences_from_file(fasta_fn):
    sequence_data_dict = {}
    for record in SeqIO.parse(fasta_fn, "fasta"):
        description = record.description.split()
        species_name = description[1] + " " + description[2]
        sequence_data_dict[species_name] = record.seq
    return(sequence_data_dict)
    
    ##### 1 Real Script #####
    
    def get_sequences_from_file(fasta_fn):
    
    #create dictionary
    sequence_data_dict = {}
    
    #4 loop to iterate and call the SeqIO.parse function
    for record in SeqIO.parse(fasta_fn, "fasta"):
    
        description = record.description.split()
        #uses the split command to  to get a record and a description
        
        species_name = description[1] + " " + description[2] 
        # the name is created with the second and third elements of the description
        
        
        sequence_data_dict[species_name] = record.seq 
        
        #we store the values and the keys of the dictionary using the record and the species names
        
        
    return(sequence_data_dict)
    #Return the dictionary
    
    #####END SCRIPT#####
    
    
    
    
    
    ## 2 ##
####### DR. X's STRING-TRANSLATE FUNCTION ########
## Write a function that translates sequences
## All sequences start at codon position 1
## Complete a function that does this using loop over the string of nucleotides
## Here is  some pseudo-code and suggestions
## feel free to change the function and variable names
# def translate_function(string_nucleotides): 
#     mito_table = CodonTable.unambiguous_dna_by_name["Vertebrate Mitochondrial"] # this should work using BioPython (be sure to check what this returns)
#     for-loop through every 3rd position in string_nucleotides to get the codon using range subsets
#         # IMPORTANT: if the sequence has a stop codon at the end, you should leave it off
#         # this is how you can retrieve the amino acid: mito_table.forward_table[codon]
#         add the aa to aa_seq_string
#     return(aa_seq_string)


##### 2 Real Script #####

#First I need to generate a list of codons in a table format from NCBI

#Then I will need to create the list of AAs through its sequence and then have a loop reaad every 3 characters to stand as a codon

#Then I will need to translate each codon using my table and make sure there are no stop codons. If there is a stop, then we need to hop out of the loop. 

def translate_function(string_nucleotides): 
    mito_table = CodonTable.unambiguous_dna_by_name["Vertebrate Mitochondrial"] 
    # Works! 
    
    
    aa_seq_string =""
    for i in range(0, len(string_nucleotides), 3):  
    # 4 loop through every 3 characters in string_nucleotides to make codons
    
    
        codon = string_nucleotides[i:i+3]
        if codon in mito_table.stop_codons:
            break        
            # IMPORTANT: check to see if the sequence has a stop codon
            
            
        aminoacid = mito_table.forward_table[codon] 
        # print the aminoacid
        
        
        aa_seq_string += aminoacid 
        # add the aa to aa_seq_string
        
        
    return(aa_seq_string)

#####END SCRIPT#####



## 3 ##
####### YOUR ALTERNATIVE FUNCTION ########
## Is there a better way to write the translation function? (Hint: yes there is.) 
## Perhaps using available BioPython library utilities?
## Please also write this function.


##### 2 Alternative Script #####
#This script will use the info found here about Biopython : http://biopython.org/DIST/docs/tutorial/Tutorial.html#htoc25

#Basically we can get the same data creating a tuple

from Bio.Seq import Seq

def Alt_translate(string_nucleotides): 

    coding_dna = Seq(string_nucleotides) 
    # Create a sequence and save it as a strin
    #This uses the IUPAC.unambigous_dna label
    
    result = string_nucleotides.translate(table="Vertebrate Mitochondrial", to_stop=True) 
    # Use the translate function on the sequence
    
    AA_Sequence = str(result) 
    # Save the output from the function as a string
    
    
    return(AA_Sequence) 
    # Return AA Sequence

#Hastag-Much simpler
#####END SCRIPT#####






## 4 Sample Script from Dr. X ##
####### YOUR COUNT AA FUNCTION ########
## Write a function that takes an amino-acid sequence (as a BioPython Seq or as a string) 
## and computes the proportion of the 3 different categories of amino acid
## (you may want to write this as 3 separate functions instead of just 1, it's up to you)
## These categories are based on the 
# def get_proportion_aa_type_function(aa_seq):
#     charged = ['R','K','D','E']
#     polar = ['Q','N','H','S','T','Y','C','M','W']
#     hydrophobic = ['A','I','L','F','V','P','G']
#     for aa in charged:
#         # count the number of times that aa appears, add to the total for charged
#     # repeat for polar and hydrophobic
#     return proportion_charged, proportion_polar, proportion_hydro 

#%%%%%%%%%%%%%%#
###   MAIN   ###
#%%%%%%%%%%%%%%#

cytb_seqs = get_sequences_from_file("bears_cytb.fasta") 

bear_df = pd.read_csv("bears_data.csv") # Includes only data for body mass currently and empty cells for other columns
species_list = list(bear_df.species)

#####END Sample SCRIPT#####




#This script should use an amino acid sequence as input and output the proportion of each type (charged, polar or hydrophobic)

#This script will create variables to represent each type of AA and then use numbers to represent each AA sequence that corresponds to that type

#Then I will use a 4 loop to read the sequence and use a counter to count the number of AAs in each category

#Then I will store the output of the counters and divide by the size of the AA sequence. 



#####My actual script for 4 #####
def get_proportion_aa(aa_seq):
    #Store each type of AA as a vector
    
    
    charged = ['R','K','D','E'] 
    
    
    polar = ['Q','N','H','S','T','Y','C','M','W']
    
    
    hydrophobic = ['A','I','L','F','V','P','G']
    
    
    #we create a counter that stores the number of the charged, polar and hydrophobic aminoacids in our sequence of interest
    c_count=0
    p_count=0
    h_count=0
    
    
    #use a 4 loop to iterate through a sequence. This should test the AA type, followed by increasing the counter if an AA matches
    for aa in str(aa_seq):
        if aa in charged:
            c_count += 1
            
        elif aa in polar:
            p_count += 1
            
        elif aa in hydrophobic:
            h_count += 1
            
    #Save results from the ration between each counter and the sequence size
    proportion_type = [c_count/len(aa_seq), p_count/len(aa_seq), h_count/len(aa_seq)]
    
    return proportion_type


#####END SCRIPT#####





# onto the main function! Woot! 

#Main function




#####Main script #####

#First I need to read the bears_data.csv file and store it as a lis.
# Next I will need to make a 4 loop to examine the AA sequence, grab the % of the types of AAs in the sequence and save the output as a df. 
#Then I will match the DF using a unique identifier and add the proportion to the matching species column.

cytb_seqs = get_sequences_from_file("bears_cytb.fasta") 
#Reads in the fasta sequence 

bear_df = pd.read_csv("bears_data.csv") 
# reads in the csv file

species_list = list(bear_df.species)
#Create a list of the species

for key, value in cytb_seqs.items():
    aa_seq =Alt_translate(str(value)) 
    #Translate function made above
    
    proportion = get_proportion_aa(aa_seq) 
    # get proportions of each aa type
    
    bear_df.loc[bear_df.species==key, 'charged'] = proportion[0]
    
    bear_df.loc[bear_df.species==key, 'polar'] = proportion[1]
    
    bear_df.loc[bear_df.species==key, 'hydrophobic'] = proportion[2] 
    # Add the proportion to the DF


#####END SCRIPT#####




#####SAMPLE #5 Script #####
## 5 ##
## Write a for-loop that translates each sequence and also gets the proportion
## of each aa type in that translated sequence and adds those data to dataframe
# for key, value in cytb_seqs.items():
#     aa_seq = nuc2aa_translate_function(value) # whichever function you prefer of #2 or #3
#     # get proportions of each aa type
#     set the value of each proportion in the dataframe (i.e., fill in empty cells in DF)

# %matplotlib inline # uncomment for jupyter nb.
#####END SCRIPT#####



#####My actual number 5 script #####

#I looked on google and came up with the seaborne library as a usefriendly way to plot these data
#seaborn library saved as sea
#First I will import the library and create a bar chart


import seaborn as sea

bar_chart = sea.barplot(x = 'species', y = 'mass', data=bear_df) 

bar_chart.set_xticklabels(labels = bear_df.species, rotation=30, horizontalalignment='right') 

#####END SCRIPT#####







## 6 ##
## Plot a bar-chart of the mass with the x-axes labeled with species names.
## What is the largest bear species? What else is interesting about this species?

The largest bear species is the Ursus spelaeus.

The other thing that is interesting about this species is that the spelaeus does not demonstrate a significantly difference gene sequence than the other species. Huh. 





## 7 ##
## Plot a visualization of the proportions for amino-acid type for the bear species
## What does this show about cytochrome-b for the bears?


#I looked on google and came up with the matplotlib as a userfriendly way to plot this puppy
#So I need to import numpy and the plotting program into python and then make me some plots! 

import numpy as num
import matplotlib.pyplot as mpl
ind = num.arange(len(bear_df))
p1= mpl.bar(ind, bear_df.charged)
p2= mpl.bar(ind, bear_df.polar, bottom = bear_df.charged)
p3= mpl.bar(ind, bear_df.hydrophobic, bottom = bear_df.charged + bear_df.polar)
mpl.xlabel('Ursus Species')
mpl.xticks(ind, bear_df.species, rotation=30, horizontalalignment='right')
mpl.ylabel('Proportion')
mpl.yticks(np.arange(0, 1.1, 0.1))
mpl.legend((p1[0], p2[0], p3[0]), ('Charged', 'Polar', 'Hydrophobic'), bbox_to_anchor=(1.01, 1.01))
mpl.show()


#cytochrome-b looks to be like a very important protein, especially since the sequence is highly conserved across species. 







## 8 ##
## Save the new dataframe to a file called "bears_mass_cytb.csv"
bear_df.to_csv('bears_mass_cytb.csv')

#Hastag-Easybutton Hashtag-ThatWasEasy







## BONUS ##
## What else can we do with this dataset in Python? 
#Well, we could examine the C/G content of the dataset pretty easily. Heck, we could even look at A/T content too!

Bonus = get_sequences_from_file("bears_cytb.fasta") 

nuc_count=pd.DataFrame

#Use a 4loop to look at the G content
for data,value in Bonus.items():
 
    G=0
    A=0
    C=0
    T=0
    #Set counts to 0
    
    
    #Use a 4 loop within the other loop to count and increase each counter for each occurence
    for j in range(0,len(value)):
    
        nuc=value[j]
        if nuc=='G':
            G=G+1
            #If find g, add 1
            
        elif nuc=='A':
            A=A+1
            #If find a add 1
            
        elif nuc=='T':
            T=T+1
            
            #If find t, add 1
        else:
            C=C+1
            #If find c, add 1
            
            
            
    print(data)
    print("G={}, A={}, C={}, T={}".format(G,A,C,T))



## That was my favorite assignment yet!
